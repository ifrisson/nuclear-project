#summary This article describes a method of creating a waveshaper using a look-up table which is then cubic-interpolated on-the-fly.
#labels DSP

= Introduction =

The idea for this particular type of waveshaper comes from the following article by Paul Bourke, describing cubic and other forms of interpolation on a table:

http://local.wasp.uwa.edu.au/~pbourke/other/interpolation/

= Why an Interpolated Table? =

Applying waveshaping to a 32-bit signal means that for every one of the 4,294,967,296 possible input values, there must also be calculable 4,294,967,296 output values, one for each possible input. The easiest way to apply waveshaping to such a signal is to apply the shaping as a function on each sample coming through. One common waveshaping function is the hyperbolic tangent, tanh(x), which can be very closely approximated by:

(1.5x)/(1+abs(x))

This works very well if all the user wants are the curves generated by such functions. What happens, though, when a more complex curve that doesn't have an elegant matching function, such as one measured straight off of an analog circuit, is to be used for a waveshaper?

The simplest solution is to place the measured curve into a table, and then use the incoming sample value to determine the output value via a simple lookup. For a 16-bit signal, it might be possible to spare 128kB of memory for a perfect 1:1 table lookup, but for a 32-bit signal, spending 16GB of memory on a table just seems stupid.

The solution is to use a much smaller table, just large enough to accurately describe the curve wanted, and then to interpolate on-the-fly the in-between values as input samples come in. The cubic interpolation algorithm allows for true continuity from point to point, when the values of two points on each side of the input value is known (1).

I won't spend time explaining the algorithm here, as the article linked above does a very nice job, complete with code snippets.

= Conclusion =

An interpolated table makes the most sense for curves that are measured from real devices. Also, for curves which are described by extremely complex mathematics, like tube models, it makes sense to "compile" a table to use instead of running each sample through a set of functions that could create very high CPU usage. The table can then be used by the interpolation algorithm to process audio.

= References =

(1) http://local.wasp.uwa.edu.au/~pbourke/other/interpolation/