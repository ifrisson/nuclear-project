#summary Design of the IDE.
#labels Phase-Design,IDE

= Introduction =

Nuclear include an Integrated Development Environment for coding DSPs with FAUST, designing custom engine GUIs and visually program the processor graph. The IDE will be developed in Python.

We're taking a serious look at using [http://wiki.drobilla.net/FlowCanvas FlowCanvas] as an easy method of drawing a graph-based visual programming GUI.

The IDE will come with a standard library of [AtomicNodes DSP blocks].

= Proposed GUI Mockup =

Here is a GUI idea mocked up by Darren Landrum:

http://nuclearproject.googlepages.com/mockup.png

This graph illustrates a straightforward feedback comb filter feeding an integrator for whatever reason (the reason being I felt like drawing an integrator). The signal comes into the adder, which won't add anything until a signal appears on its other input. The output of the adder then splits out to the input (which has been placed on the right edge) of a variable delay line (the bottom output is for taps, which aren't used here). The top input is the length of the line, which is being fed a constant number of samples, in this case, 2746. The output goes to a multiplier, whose other input is a user control that goes between 0 and 1, set to 0.58 in this example. The multiplier output then feeds back into the adder and the cycle starts all over again. The main input of the adder and the output of the integrator connect to other parts of the graph.

Each block is a node. They are spaced equidistant along a grid of theoretically infinite size. The "notches and tabs" (the semi-circles) on each block are inputs and outputs, respectively. These can be placed individually along any edge of the block. That way, graphs can flow in whatever direction makes the most sense for the specific graph, and for the programmer of said graph.

The green lines are the signal flow. The red square in the lower left represents the _cursor_, which would be blinking. This highlights the active square, which in this example holds nothing. The cursor can be moved by keyboard or mouse. The right mouse button or the enter key can then be used to bring up a selection dialog for the node to be placed there.

Hovering over (or perhaps single-clicking) an input or output would pop up an explanation of the port.

I think this widget could be implement in PyGTK using Cairo, with no need for using Glade or FlowCanvas. Indeed, I think the entire GUI can be built in this way.