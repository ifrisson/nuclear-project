#summary This page continues a previous discussion about how to handle polyphony and oversampling within Nuclear.
#labels Phase-Requirements,Phase-Design

= Introduction =

This page is a continuation and summary of a previously private discussion between the two initial developers of Nuclear.

= Special Graph Regions =

Perhaps one way to handle both polyphony and oversampling would be to have special regions of the graph, definable by the instrument creator, within which will be placed the nodes that will be affected by either the oversampler or the polyphony manager. For all except a strictly monophonic instrument, most nodes will go within the polyphony region. Anything nodes that need to be oversampled would then be placed within a special oversampling region, defined by the instrument designer.

This could work out well, because both polyphony and oversampling are, at their core, essentially just inner-most for() loops that run through all of their iterations per sample clock tick. For polyphony, another iteration of the loop would be created when new notes are pressed. For oversampling, a fixed number of loop iterations would run, defined by how many times the user wants to oversample those particular nodes.