#summary How do we fulfill the requirements?
#labels Phase-Design,Featured,Deprecated

= Introduction =

The Nuclear project consist of three major parts:

 * _Software Development Kit_. A C++ framework for creating engines. Can be used on its own to manually develop a engine or in conjunction with code generators. Contain algorithms for handling engine, voices and the processor graph, it also provides common hosts for engines (JACK application, DSSI, LV2, VSTi, Audio Unit, RTAS, Python module, etc.).

 * _Code Generators_. Generate C++ code from declarations. Nodes for the processor graph are generated using FAUST from DSP files. The processor graph and engine is generated by our own code generator from XML files. The output from the code generators are compiled and linked to the SDK to create a functioning engine.

 * _Integrated Development Environment_. User friendly GUI editor that let you create and edit declarations to be processed by the code generators.

== Software Development Kit ==

The [SoftwareDevelopmentKit SDK] provides containers and algorithms as a framework for the purpose of creating synth engines. It doesn't make any sound on it's own but take care of all the mind numbing details of dynamic memory allocation and signal routing.

== Code Generators ==

The Nuclear [CodeGenerator code generator] take an engine declaration as a XML file as input and generate C++ code using the SDK that can be compiled into a native binary. The generator itself will be developed in Python.

== Integrated Development Environment ==

Nuclear include an [IntegratedDevelopmentEnvironment Integrated Development Environment] for coding DSPs with FAUST, designing custom engine GUIs and visually program the processor graph. The IDE will be developed in Python.

= See Also = 

  * [Requirements]