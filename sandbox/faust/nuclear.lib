////////////////////////////////////////////////////////////////////////////////
// The Nuclear Faust Library
//
// This library contains a set of commonly-used functions for the Nuclear suite
// of LV2 plug-ins. This library will grow as new commonly-used functions are
// found.
//
// This program is free software; you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free Software
// Foundation; either version 2 of the License, or (at your option) any later
// version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
//
// You should have received a copy of the GNU General Public License along with
// this program; if not, write to the Free Software Foundation, Inc., 675 Mass
// Ave, Cambridge, MA 02139, USA.
////////////////////////////////////////////////////////////////////////////////

declare name        "The Nuclear Library";
declare author      "Darren Landrum";
declare copyright   "Darren Landrum";
declare version     "1.0";
declare license     "GPL Version 2 or later";
declare thanks      "Yann Orlarey, Albert Graef, Julius Smith, Robert Bristow-Johnson, GRAME";

import("filter.lib"); // this also imports math.lib and music.lib

//-------------------------------------
// General-purpose functions

// Gain conversion, dB to linear
dbgain(g) = pow(2,(g/6));

// A general-purpose fader
fader(g,x) = dbgain(g)*x;

//-------------------------------------
// RBJ Filters
//
// These functions define a generic
// biquad filter, courtesy of Albert
// Graef, and then various filters
// straight from the Robert Bristow-
// Johnson EQ cookbook.

// Generic bi-quad filter - second order (courtesy of Albert Graef)
generic_biquad(b0,b1,b2,a0,a1,a2) = f : (+ ~ g) with
{
    f(x) = (b0/a0)*x+(b1/a0)*x'+(b2/a0)*x'';
    g(y) = 0-(a1/a0)*y-(a2/a0)*y';
};

// Low-shelf filter (EQ)
rbj_low_shelf(f0,g) = generic_biquad(b0,b1,b2,a0,a1,a2) with
{
    S       = 1;
    A       = pow(10,g/40);
    w0      = 2*PI*f0/SR;
    alpha   = sin(w0)/2 * sqrt((A + 1/A)*(1/S - 1) + 2);
    
    b0      =   A*((A+1)-(A-1)*cos(w0)+2*sqrt(A)*alpha);
    b1      = 2*A*((A-1)-(A+1)*cos(w0));
    b2      =   A*((A+1)-(A-1)*cos(w0)-2*sqrt(A)*alpha);
    a0      =      (A+1)+(A-1)*cos(w0)+2*sqrt(A)*alpha;
    a1      =  -2*((A-1)+(A+1)*cos(w0));
    a2      =      (A+1)+(A-1)*cos(w0)-2*sqrt(A)*alpha;
};

// High-shelf filter (EQ)
rbj_high_shelf(f0,g) = generic_biquad(b0,b1,b2,a0,a1,a2) with
{
    S       = 1;
    A       = pow(10,g/40);
    w0      = 2*PI*f0/SR;
    alpha   = sin(w0)/2 * sqrt((A + 1/A)*(1/S - 1) + 2);
    
    b0      =    A*((A+1)+(A-1)*cos(w0)+ 2*sqrt(A)*alpha);
    b1      = -2*A*((A-1)+(A+1)*cos(w0));
    b2      =    A*((A+1)+(A-1)*cos(w0)- 2*sqrt(A)*alpha);
    a0      =       (A+1)-(A-1)*cos(w0)+ 2*sqrt(A)*alpha;
    a1      =    2*((A-1)-(A+1)*cos(w0));
    a2      =       (A+1)-(A-1)*cos(w0)- 2*sqrt(A)*alpha;
};

// Peaking filter (EQ)
rbj_mid_peak(f0,g) = generic_biquad(b0,b1,b2,a0,a1,a2) with
{
    S       = 1;
    A       = pow(10,g/40);
    w0      = 2*PI*f0/SR;
    alpha   = sin(w0)/2 * sqrt((A + 1/A)*(1/S - 1) + 2);
    
    b0      =  1+alpha*A;
    b1      = -2*cos(w0);
    b2      =  1-alpha*A;
    a0      =  1+alpha/A;
    a1      = -2*cos(w0);
    a2      =  1-alpha/A;
};

//-------------------------------------
// Additional filters, based upon the
// implementations in filter.lib by
// Julius Smith. filter.lib is getting
// an update soon, so these will become
// obsolete.

// A one-pole high-pass filter
highpass1(f0,x)      = x-lowpass1(f0,x);

// A set of one-pole shelves
lowshelf1(B0,f0,x)   = x+B0*lowpass1(f0,x);
highshelf1(Bpi,f0,x) = x+Bpi*highpass1(f0,x);

//-------------------------------------
// Non-linear processing functions

// A tan(h) approximation, with a
// coefficient input to control
// saturation amount
tanh_approx(a,x) = (a*x)/(1.0+abs(x));

